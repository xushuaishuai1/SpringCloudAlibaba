server:
  port: 7000
spring:
  redis:
    host: 133.65.101.1
    port: 6379
  application:
    name: baseGateWay
  cloud:
    nacos:
      #nacos注册中心地址
      discovery:
        server-addr: 127.0.0.1:8848
      #nacos配置中心地址
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        #nacos管理配置公用配置文件
        prefix: nacos-config-demo
        #默认，可以不写
        file-extension: yml
        #默认，可以不写，不使用group区分可以不写
        #spring.cloud.nacos.config.group=DEFAULT_GROUP
        #不使用namespace 可以不写
        #spring.cloud.nacos.config.namespace=a4d866b0-bce5-4a95-a7c2-9663ddad4c52
        #假设现在有这样的一个需求：我们想要对所有应用的Actuator模块以及日志输出做统一的配置管理。所以，我们希望可以将Actuator模块的配置放在独立的配置文件actuator.properties文件中，而对于日志输出的配置放在独立的配置文件log.properties文件中。通过拆分这两类配置内容，希望可以做到配置的共享加载与统一管理。
        #spring.cloud.nacos.config.shared-dataids=actuator.properties,log.properties
        #spring.cloud.nacos.config.refreshable-dataids=actuator.properties,log.properties
    #网关配置
    gateway:
      routes:
        #转发配置demo
        #我们自定义的路由 ID，保持唯一
        - id: csdn
          #目标服务地址
          uri: https://blog.csdn.net
          #路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。
          #上面这段配置的意思是，配置了一个 id 为 baidu 的路由规则，当访问地址 http://localhost:7000/csdn时会自动转发到地址：https://blog.csdn.net
          predicates:
            - Path=/csdn
        #限流配置demo
        - id: baseClient
          uri: lb://baseClient
          predicates:
            - Path=/baseClient/**
          filters:
            - name: RequestRateLimiter
              args:
                #令牌桶填充效率1
                redis-rate-limiter.replenishRate: 1
                #令牌桶表示一秒钟最多5个请求
                redis-rate-limiter.burstCapacity: 2
                key-resolver: '#{@ipKeyResolver}'
      #是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 false，设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。
      discovery:
        locator:
          enabled: true
logging:
  level:
    org.springframework.cloud.gateway: debug
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#spring.cloud.gateway.discovery.locator.filters=-StripPrefix=1


